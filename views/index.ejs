<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Valentino Orders</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700&family=Roboto&display=swap"
      rel="stylesheet"
    />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vara@1.4.0/lib/vara.min.js"></script>
    <style>
      body {
        margin: 0;
        padding: 0;
        font-family: "Roboto", sans-serif;
        background: url("/bg.jpg") no-repeat center center fixed;
        background-size: cover;
        color: white;
      }

      .overlay {
        background-color: rgba(28, 28, 28, 0.6);
        min-height: 100vh;
        padding: 40px 20px;
        width: 100vw;
      }

      #vara-heading {
        text-align: center;
        width: 600px;
        margin: 0 auto 40px auto;
        height: 120px;
      }

      #reset-btn,
      #test-order-btn {
        display: block;
        margin: 20px auto 30px auto;
        background-color: white;
        color: #1c1c1c;
        border: none;
        padding: 10px 20px;
        font-size: 1em;
        border-radius: 6px;
        cursor: pointer;
      }

      #reset-btn:hover,
      #test-order-btn:hover {
        background-color: #ccc;
      }

      #current-order {
        background: #2c2c2c;
        border: 2px solid #444;
        padding: 20px;
        border-radius: 12px;
        width: 100%;
        max-width: 600px;
        margin: 20px auto;
        text-align: center;
        min-height: 180px;
        position: relative;
      }

      #order-animation {
        width: 100%;
        height: auto;
        min-height: 130px;
      }

      .btn-container,
      .container,
      .order-container,
      .completed-container {
        display: flex;
        width: 100vw;
        justify-content: center;
        align-items: center;
      }

      #recipe-toggle-btn {
        margin: 20px auto 0;
        padding: 10px 25px;
        font-size: 1em;
        background-color: #ffd700;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        color: #1c1c1c;
        font-weight: 700;
        transition: background-color 0.3s ease;
        display: none; /* Hidden initially, shown when order exists */
      }
      #recipe-toggle-btn:hover {
        background-color: #e6c200;
      }

      #recipe-info {
        max-width: 600px;
        margin: 10px auto 30px;
        padding: 15px;
        background-color: rgba(40, 40, 40, 0.85);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.4);
        border-radius: 8px;
        border: 1px solid #555;
        color: white;
        font-size: 0.95em;
        line-height: 1.4em;
        overflow: hidden;

        max-height: 0;
        padding-top: 0;
        padding-bottom: 0;
        opacity: 0;
        transition: max-height 0.5s ease, padding 0.5s ease, opacity 0.5s ease;
      }
      #recipe-info.show {
        max-height: 1000px; /* big enough to show content */
        padding-top: 15px;
        padding-bottom: 15px;
        opacity: 1;
      }

      #log {
        margin-top: 40px;
        max-width: 700px;
        width: 90%;
      }

      .log-entry {
        background: #292929;
        border-left: 4px solid #666;
        padding: 12px 20px;
        margin-bottom: 10px;
        border-radius: 6px;
      }

      #log h3 {
        font-family: "Playfair Display", serif;
        font-size: 1.8em;
        border-bottom: 1px solid #444;
        padding-bottom: 10px;
        margin-bottom: 20px;
      }
    </style>
  </head>
  <body>
    <div class="overlay">
      <!-- Animated Main Heading -->
      <div class="container">
        <div id="vara-heading"></div>
      </div>

      <!-- Test Demo Order Button -->
      <button id="test-order-btn">Test Demo Order</button>

      <div class="btn-container">
        <button id="reset-btn">Reset All Orders</button>
      </div>

      <div class="order-container">
        <div id="current-order">
          <div id="order-animation">
            <h2>Waiting for next order...</h2>
          </div>
          <button id="recipe-toggle-btn">Show Recipe</button>
          <div id="recipe-info"></div>
        </div>
      </div>

      <div class="completed-container">
        <div id="log">
          <h3>Completed Orders</h3>
          <div id="log-entries"></div>
        </div>
      </div>
    </div>

    <script>
      // Animate main heading
      new Vara(
        "#vara-heading",
        "https://cdn.jsdelivr.net/npm/vara@1.4.0/fonts/Satisfy/SatisfySL.json",
        [
          {
            text: "Valentino - Fuel Your Desire",
            y: 20,
            textAlign: "center",
            fromCurrentPosition: { y: false },
            duration: 2000,
            fontSize: 40,
            strokeWidth: 3,
            color: "white",
          },
        ]
      );

      let currentOrder = null;

      const currentOrderDiv = document.getElementById("current-order");
      const orderAnimationDiv = document.getElementById("order-animation");
      const logEntriesDiv = document.getElementById("log-entries");
      const resetBtn = document.getElementById("reset-btn");
      const testOrderBtn = document.getElementById("test-order-btn");
      const recipeToggleBtn = document.getElementById("recipe-toggle-btn");
      const recipeInfoDiv = document.getElementById("recipe-info");

      function animateOrderText(lines) {
        orderAnimationDiv.innerHTML = "";
        recipeInfoDiv.classList.remove("show");
        recipeToggleBtn.style.display = "none";
        recipeToggleBtn.innerText = "Show Recipe";

        new Vara(
          "#order-animation",
          "https://cdn.jsdelivr.net/npm/vara@1.4.0/fonts/Satisfy/SatisfySL.json",
          lines,
          {
            fontSize: 30,
            strokeWidth: 1,
            color: "#fffef9",
            duration: 2500,
            onComplete: () => {
              if (currentOrder && currentOrder.recipe) {
                recipeToggleBtn.style.display = "inline-block";
              }
            },
          }
        );
      }
      function showCurrentOrder(order) {
        currentOrder = order;

        const orderLines = [
          { text: order.user, y: 20 },
          { text: `Drink: ${order.drink}`, y: 60 },
          { text: `Payment: ${order.cost}`, y: 100 },
        ];

        if (order.dare) {
          orderLines.push({ text: `Dare: ${order.dare}`, y: 140 });
        }

        animateOrderText(orderLines);

        if (order.recipe) {
          const ingredientsHTML = order.recipe.ingredients
            .map((item) => `<li>${item}</li>`)
            .join("");

          recipeInfoDiv.innerHTML = `
      <h3 style="margin-bottom: 10px; font-family: 'Playfair Display', serif; font-weight: 700; font-size: 1.4em; color: #ffd700;">Ingredients</h3>
      <ul style="
        list-style-type: square;
        padding-left: 25px;
        margin-top: 0;
        margin-bottom: 20px;
        font-size: 1em;
        line-height: 1.6em;
        color: #f0f0f0;
      ">
        ${ingredientsHTML}
      </ul>
      <h3 style="margin-bottom: 10px; font-family: 'Playfair Display', serif; font-weight: 700; font-size: 1.4em; color: #ffd700;">Method</h3>
      <p style="
        font-size: 1em;
        line-height: 1.6em;
        color: #ddd;
        margin-top: 0;
      ">${order.recipe.method}</p>
    `;

          // Show recipe toggle button and recipe info immediately
          recipeToggleBtn.style.display = "inline-block";
          recipeInfoDiv.classList.add("show");
          recipeToggleBtn.innerText = "Hide Recipe";
        } else {
          recipeInfoDiv.innerHTML = "";
          recipeInfoDiv.classList.remove("show");
          recipeToggleBtn.style.display = "none";
        }
      }

      function clearOrderAnimation() {
        orderAnimationDiv.innerHTML = "<h2>Waiting for next order...</h2>";
        recipeInfoDiv.classList.remove("show");
        recipeToggleBtn.style.display = "none";
        currentOrder = null;
      }

      recipeToggleBtn.addEventListener("click", () => {
        const isVisible = recipeInfoDiv.classList.contains("show");
        if (isVisible) {
          recipeInfoDiv.classList.remove("show");
          recipeToggleBtn.innerText = "Show Recipe";
        } else {
          recipeInfoDiv.classList.add("show");
          recipeToggleBtn.innerText = "Hide Recipe";
          recipeInfoDiv.scrollIntoView({ behavior: "smooth", block: "start" });
        }
      });

      resetBtn.addEventListener("click", () => {
        fetch("/api/reset", { method: "POST" })
          .then((res) => res.json())
          .then(() => {
            clearOrderAnimation();
            logEntriesDiv.innerHTML = "";
            currentOrder = null;
          })
          .catch((err) => console.error(err));
      });

      testOrderBtn.addEventListener("click", manualTestOrder);

      function manualTestOrder() {
        const testOrder = {
          user: "Alex",
          drink: "Cosmopolitan",
          cost: "Â£6",
          dare: "Sing a song",
          recipe: {
            ingredients: [
              "50ml vodka",
              "15ml Cointreau",
              "15ml cranberry juice",
              "10ml fresh lime juice",
            ],
            method:
              "Shake all ingredients with ice and strain into a chilled cocktail glass.",
          },
        };

        showCurrentOrder(testOrder);
        addLogEntry(testOrder);
      }

      function addLogEntry(order) {
        const entry = document.createElement("div");
        entry.className = "log-entry";
        entry.innerHTML = `
          <strong>User:</strong> ${order.user} <br />
          <strong>Drink:</strong> ${order.drink} <br />
          <strong>Payment:</strong> ${order.cost} <br />
          ${order.dare ? `<strong>Dare:</strong> ${order.dare} <br />` : ""}
          ${order.recipe ? `<em>Recipe included</em>` : ""}
        `;
        logEntriesDiv.prepend(entry);
      }

      // Connect to SSE for live orders (optional)
      // Commented here as no SSE endpoint in demo

      const events = new EventSource("/events");
      events.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data);
          const order = data[data.length - 1];
          console.log(order);
          if (order) {
            showCurrentOrder(order);
            addLogEntry(order);
          }
        } catch (e) {
          console.error("Error parsing event data", e);
        }
      };
      const testOrder = {
        user: "Meghs",
        drink: "Naked Citrus",
        cost: "Dare Card (Flirty)",
        dare: "Give me a gentle kiss on my wrist.",
        recipe: {
          ingredients: [
            "grapefruit vodka",
            "lime juice",
            "tonic water",
            "ice",
            "mint leaves",
          ],
          method:
            "Shake vodka with lime juice and ice, pour into glass, top with tonic water and garnish with mint.",
        },
      };

      showCurrentOrder(testOrder);
    </script>
  </body>
</html>
